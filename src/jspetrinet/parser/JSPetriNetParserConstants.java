/* Generated By:JavaCC: Do not edit this line. JSPetriNetParserConstants.java */
package jspetrinet.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JSPetriNetParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLACE = 6;
  /** RegularExpression Id. */
  int EXPTRANS = 7;
  /** RegularExpression Id. */
  int IMMTRANS = 8;
  /** RegularExpression Id. */
  int GENTRANS = 9;
  /** RegularExpression Id. */
  int GENCONSTTRANS = 10;
  /** RegularExpression Id. */
  int GENUNIFTRANS = 11;
  /** RegularExpression Id. */
  int ARC = 12;
  /** RegularExpression Id. */
  int IARC = 13;
  /** RegularExpression Id. */
  int OARC = 14;
  /** RegularExpression Id. */
  int HARC = 15;
  /** RegularExpression Id. */
  int IFELSE = 16;
  /** RegularExpression Id. */
  int TO = 17;
  /** RegularExpression Id. */
  int NET = 18;
  /** RegularExpression Id. */
  int MARK = 19;
  /** RegularExpression Id. */
  int BEGIN = 20;
  /** RegularExpression Id. */
  int END = 21;
  /** RegularExpression Id. */
  int COMMENT = 22;
  /** RegularExpression Id. */
  int REAL = 23;
  /** RegularExpression Id. */
  int INTEGER = 24;
  /** RegularExpression Id. */
  int BOOLEAN = 25;
  /** RegularExpression Id. */
  int STRING = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int MULTIPLY = 29;
  /** RegularExpression Id. */
  int DIVIDE = 30;
  /** RegularExpression Id. */
  int MOD = 31;
  /** RegularExpression Id. */
  int OR = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int NOT = 34;
  /** RegularExpression Id. */
  int EQ = 35;
  /** RegularExpression Id. */
  int NEQ = 36;
  /** RegularExpression Id. */
  int GT = 37;
  /** RegularExpression Id. */
  int LT = 38;
  /** RegularExpression Id. */
  int GTE = 39;
  /** RegularExpression Id. */
  int LTE = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;
  /** RegularExpression Id. */
  int GLOBAL_NTOKEN = 42;
  /** RegularExpression Id. */
  int NTOKEN = 43;
  /** RegularExpression Id. */
  int ECOND = 44;
  /** RegularExpression Id. */
  int OPEN = 45;
  /** RegularExpression Id. */
  int CLOSE = 46;
  /** RegularExpression Id. */
  int NL = 47;
  /** RegularExpression Id. */
  int SEND = 48;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 5>",
    "\"place\"",
    "\"exp\"",
    "\"imm\"",
    "\"gen\"",
    "\"gen.const\"",
    "\"gen.unif\"",
    "\"arc\"",
    "\"iarc\"",
    "\"oarc\"",
    "\"harc\"",
    "\"ifelse\"",
    "\"to\"",
    "\"net\"",
    "\"mark\"",
    "\"{\"",
    "\"}\"",
    "<COMMENT>",
    "<REAL>",
    "<INTEGER>",
    "<BOOLEAN>",
    "<STRING>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "<IDENTIFIER>",
    "\"##\"",
    "\"#\"",
    "\"?\"",
    "\"(\"",
    "\")\"",
    "<NL>",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\":=\"",
  };

}
