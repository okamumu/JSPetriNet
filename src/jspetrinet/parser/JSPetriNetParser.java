/* JSPetriNetParser.java */
/* Generated By:JavaCC: Do not edit this line. JSPetriNetParser.java */
package jspetrinet.parser;
import jspetrinet.ast.*;
import jspetrinet.exception.*;
import jspetrinet.petri.*;
import jspetrinet.dist.*;

public class JSPetriNetParser implements JSPetriNetParserConstants {
        private Net current;
        private Net global;

        public void setNet(Net global) {
                this.global = global;
                this.current = global;
        }

  final public void makeNet() throws ParseException, ASTException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLACE:
      case EXPTRANS:
      case IMMTRANS:
      case GENTRANS:
      case GENCONSTTRANS:
      case GENUNIFTRANS:
      case ARC:
      case IARC:
      case OARC:
      case HARC:
      case IFELSE:
      case NET:
      case BEGIN:
      case COMMENT:
      case REAL:
      case INTEGER:
      case BOOLEAN:
      case STRING:
      case PLUS:
      case MINUS:
      case NOT:
      case IDENTIFIER:
      case GLOBAL_NTOKEN:
      case NTOKEN:
      case ECOND:
      case OPEN:
      case NL:
      case SEND:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLACE:
      case EXPTRANS:
      case IMMTRANS:
      case GENTRANS:
      case GENCONSTTRANS:
      case GENUNIFTRANS:
      case ARC:
      case IARC:
      case OARC:
      case HARC:
      case IFELSE:
      case NET:
      case BEGIN:
      case REAL:
      case INTEGER:
      case BOOLEAN:
      case STRING:
      case PLUS:
      case MINUS:
      case NOT:
      case IDENTIFIER:
      case GLOBAL_NTOKEN:
      case NTOKEN:
      case ECOND:
      case OPEN:{
        Statement();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMENT:{
        jj_consume_token(COMMENT);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEND:{
        jj_consume_token(SEND);
        break;
        }
      case NL:{
        jj_consume_token(NL);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Statement() throws ParseException, ASTException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BEGIN:{
      block();
      break;
      }
    case PLACE:
    case EXPTRANS:
    case IMMTRANS:
    case GENTRANS:
    case GENCONSTTRANS:
    case GENUNIFTRANS:
    case ARC:
    case IARC:
    case OARC:
    case HARC:
    case NET:{
      Declaration();
      break;
      }
    case IFELSE:
    case REAL:
    case INTEGER:
    case BOOLEAN:
    case STRING:
    case PLUS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case GLOBAL_NTOKEN:
    case NTOKEN:
    case ECOND:
    case OPEN:{
      Expression();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void block() throws ParseException, ASTException {
    bbegin();
    makeNet();
    bend();
  }

  final public void bbegin() throws ParseException, ASTException {
    jj_consume_token(BEGIN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLACE:
    case EXPTRANS:
    case IMMTRANS:
    case GENTRANS:
    case GENCONSTTRANS:
    case GENUNIFTRANS:
    case ARC:
    case IARC:
    case OARC:
    case HARC:
    case IFELSE:
    case NET:
    case BEGIN:
    case REAL:
    case INTEGER:
    case BOOLEAN:
    case STRING:
    case PLUS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
    case GLOBAL_NTOKEN:
    case NTOKEN:
    case ECOND:
    case OPEN:{
      Statement();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMENT:{
      jj_consume_token(COMMENT);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEND:{
      jj_consume_token(SEND);
      break;
      }
    case NL:{
      jj_consume_token(NL);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void bend() throws ParseException, ASTException {
    jj_consume_token(END);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEND:{
      jj_consume_token(SEND);
      break;
      }
    case NL:{
      jj_consume_token(NL);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Declaration() throws ParseException, ASTException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NET:{
      NetDeclaration();
      break;
      }
    case PLACE:{
      PlaceDeclaration();
      break;
      }
    case EXPTRANS:{
      ExpTransDeclaration();
      break;
      }
    case IMMTRANS:{
      ImmTransDeclaration();
      break;
      }
    case GENTRANS:{
      GenTransDeclaration();
      break;
      }
    case GENCONSTTRANS:{
      GenConstTransDeclaration();
      break;
      }
    case GENUNIFTRANS:{
      GenUnifTransDeclaration();
      break;
      }
    case ARC:{
      ArcDeclaration();
      break;
      }
    case IARC:{
      IArcDeclaration();
      break;
      }
    case OARC:{
      OArcDeclaration();
      break;
      }
    case HARC:{
      HArcDeclaration();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NetDeclaration() throws ParseException, ASTException {Token token;
    jj_consume_token(NET);
    token = jj_consume_token(IDENTIFIER);
if (current.contains(token.image)) {
                        current = current.getChild(token.image);
                } else {
                        Net tmp = new Net(current, token.image);
                        current = tmp;
                }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NL:{
      jj_consume_token(NL);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    block();
current = current.getOuter();
  }

  final public void PlaceDeclaration() throws ParseException, ASTException {Token token;
        PairValueList optlist;
        Place p;
        int pmax;
    jj_consume_token(PLACE);
    token = jj_consume_token(IDENTIFIER);
pmax = Place.DefaultMax;
//		p = current.createPlace(token.image, Place.DefaultMax);

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        Object value = pval.getValue().eval(current);
                        if (label.equals("max")) {
                                if (value instanceof Integer) {
                                        pmax = (Integer) value;
                                } else {
                                        {if (true) throw new ASTException("The max attribute should be an integer");}
                                }
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
p = current.createPlace(token.image, pmax);
  }

  final public void ExpTransDeclaration() throws ParseException, ASTException {Token token;
        PairValueList optlist;
        ExpTrans tr;
    jj_consume_token(EXPTRANS);
    token = jj_consume_token(IDENTIFIER);
tr = current.createExpTrans(token.image,
                        new ASTVariable(token.image + ".rate"));
                tr.setGuard(new ASTVariable(token.image + ".guard"));
                current.put(token.image + ".rate", new ASTValue(token.image + ".rate"));
                current.put(token.image + ".guard", new ASTValue(true));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        if (label.equals("rate")) {
                                current.put(token.image + ".rate", value);
                        } else if (label.equals("guard")) {
                                current.put(token.image + ".guard", value);
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void ImmTransDeclaration() throws ParseException, ASTException {Token token;
        PairValueList optlist;
        ImmTrans tr;
    jj_consume_token(IMMTRANS);
    token = jj_consume_token(IDENTIFIER);
tr = current.createImmTrans(token.image,
                        new ASTVariable(token.image + ".weight"));
                tr.setGuard(new ASTVariable(token.image + ".guard"));
                current.put(token.image + ".guard", new ASTValue(true));
    tr.setPriority(0);
    tr.setVanishable(false);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        if (label.equals("weight")) {
                                current.put(token.image + ".weight", value);
                        } else if (label.equals("guard")) {
                                current.put(token.image + ".guard", value);
                        } else if (label.equals("priority")) {
        Object obj = value.eval(current);
        if (obj instanceof Integer) {
          tr.setPriority((Integer) obj);
        } else {
          {if (true) throw new ASTException("The priority attribute should be an integer.");}
        }
      } else if (label.equals("vanishing")) {
        Object obj = value.eval(current);
        if (obj instanceof Boolean) {
          tr.setVanishable((Boolean) obj);
        } else {
          {if (true) throw new ASTException("The vanishing attribute should be a boolean.");}
        }
      } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void GenTransDeclaration() throws ParseException, ASTException {Token token;
        PairValueList optlist;
    jj_consume_token(GENTRANS);
    token = jj_consume_token(IDENTIFIER);
current.createGenTrans(token.image,
                new ASTVariable(token.image + ".dist"), GenTrans.DefaultPolicy);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        GenTrans tr = (GenTrans) current.get(token.image);
                        if (label.equals("dist")) {
                                current.put(token.image + ".dist", value);
                        } else if (label.equals("policy")) {
                                Object v = value.eval(current);
                                if (v instanceof Integer) {
                                        int pol = ((Integer) v).intValue();
                                        if (pol == 0) {
                                                tr.setPolicy(GenTransPolicy.PRD);
                                        } else if (pol == 1) {
                                                tr.setPolicy(GenTransPolicy.PRS);
                                        } else {
                                                {if (true) throw new UnknownOption("Unknown policy");}
                                        }
                                } else {
                                        {if (true) throw new UnknownOption("Unknown policy");}
                                }
                        } else if (label.equals("guard")) {
                                tr.setGuard(value);
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void GenConstTransDeclaration() throws ParseException, ASTException {Token token;
        PairValueList optlist;
    jj_consume_token(GENCONSTTRANS);
    token = jj_consume_token(IDENTIFIER);
current.createGenTrans(token.image, new ASTVariable(token.image + ".dist"), GenTrans.DefaultPolicy);
                current.put(token.image + ".dist", new ConstDist(new ASTValue("value")));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        GenTrans tr = (GenTrans) current.get(token.image);
                        ConstDist dist = (ConstDist) current.get(token.image + ".dist");
                        if (label.equals("value")) {
                                dist.setConstValue(value);
                        } else if (label.equals("policy")) {
                                Object v = value.eval(current);
                                if (v instanceof Integer) {
                                        int pol = ((Integer) v).intValue();
                                        if (pol == 0) {
                                                tr.setPolicy(GenTransPolicy.PRD);
                                        } else if (pol == 1) {
                                                tr.setPolicy(GenTransPolicy.PRS);
                                        } else {
                                                {if (true) throw new UnknownOption(label);}
                                        }
                                } else {
                                        {if (true) throw new UnknownOption(label);}
                                }
                        } else if (label.equals("guard")) {
                                tr.setGuard(value);
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void GenUnifTransDeclaration() throws ParseException, ASTException {Token token;
        PairValueList optlist;
    jj_consume_token(GENUNIFTRANS);
    token = jj_consume_token(IDENTIFIER);
current.createGenTrans(token.image, new ASTVariable(token.image + ".dist"), GenTrans.DefaultPolicy);
                current.put(token.image + ".dist", new UnifDist(new ASTValue("lower"), new ASTValue("upper")));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        GenTrans tr = (GenTrans) current.get(token.image);
                        UnifDist dist = (UnifDist) current.get(token.image + ".dist");
                        if (label.equals("lower")) {
                                dist.setLower(value);
                        } else if (label.equals("upper")) {
                                dist.setUpper(value);
                        } else if (label.equals("policy")) {
                                Object v = value.eval(current);
                                if (v instanceof Integer) {
                                        int pol = ((Integer) v).intValue();
                                        if (pol == 0) {
                                                tr.setPolicy(GenTransPolicy.PRD);
                                        } else if (pol == 1) {
                                                tr.setPolicy(GenTransPolicy.PRS);
                                        } else {
                                                {if (true) throw new UnknownOption(label);}
                                        }
                                } else {
                                        {if (true) throw new UnknownOption(label);}
                                }
                        } else if (label.equals("guard")) {
                                tr.setGuard(value);
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void ArcDeclaration() throws ParseException, ASTException {Token src;
        Token dest;
        PairValueList optlist;
        ArcBase a;
    jj_consume_token(ARC);
    src = jj_consume_token(IDENTIFIER);

    jj_consume_token(TO);
    dest = jj_consume_token(IDENTIFIER);
Object s, d;
                try {
                        s = current.get(src.image);
                        d = current.get(dest.image);
                } catch (NotFindObjectException e) {
                        {if (true) throw new NotFindObjectException("Did not find " + src.image + " -> " + dest.image);}
                }
                try {
                        if (s instanceof Place && d instanceof Trans) {
                                a = current.createNormalInArc((Place) s, (Trans) d, new ASTValue(1));
                        } else if (s instanceof Trans && d instanceof Place) {
                                a = current.createNormalOutArc((Trans) s, (Place) d, new ASTValue(1));
                        } else {
                                {if (true) throw new ASTException("Error: An arc should be Place to Trans or Trans to Place " + src.image + " -> " + dest.image);}
                        }
                } catch (AlreadyExistException e3) {
                        {if (true) throw new AlreadyExistException("Already exist the arc " + src.image + " -> " + dest.image);}
                }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        if (label.equals("multi")) {
                                a.setMulti(value);
                        } else if (label.equals("firing")) {
                                a.setFiring(value);
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  final public void IArcDeclaration() throws ParseException, ASTException {Token src;
        Token dest;
        PairValueList optlist;
        ArcBase a;
    jj_consume_token(IARC);
    src = jj_consume_token(IDENTIFIER);

    jj_consume_token(TO);
    dest = jj_consume_token(IDENTIFIER);
Place p = (Place) current.get(src.image);
                Trans tr = (Trans) current.get(dest.image);
                a = current.createNormalInArc(p, tr, new ASTValue(1));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        if (label.equals("multi")) {
                                a.setMulti(value);
                        } else if (label.equals("firing")) {
                                a.setFiring(value);
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void OArcDeclaration() throws ParseException, ASTException {Token src;
        Token dest;
        PairValueList optlist;
        ArcBase a;
    jj_consume_token(OARC);
    src = jj_consume_token(IDENTIFIER);

    jj_consume_token(TO);
    dest = jj_consume_token(IDENTIFIER);
Place p = (Place) current.get(dest.image);
                Trans tr = (Trans) current.get(src.image);
                a = current.createNormalOutArc(tr, p, new ASTValue(1));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        if (label.equals("multi")) {
                                a.setMulti(value);
                        } else if (label.equals("firing")) {
                                a.setFiring(value);
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void HArcDeclaration() throws ParseException, ASTException {Token src;
        Token dest;
        PairValueList optlist;
        ArcBase a;
    jj_consume_token(HARC);
    src = jj_consume_token(IDENTIFIER);

    jj_consume_token(TO);
    dest = jj_consume_token(IDENTIFIER);
Place p = (Place) current.get(src.image);
                Trans tr = (Trans) current.get(dest.image);
                a = current.createInhibitArc(p, tr, new ASTValue(1));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN:{
      jj_consume_token(OPEN);
      optlist = OptionList();
for (PairValue pval : optlist.getList()) {
                        String label = pval.getLabel();
                        AST value = pval.getValue();
                        if (label.equals("multi")) {
                                a.setMulti(value);
                        } else {
                                {if (true) throw new UnknownOption(label);}
                        }
                }
      jj_consume_token(CLOSE);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public PairValueList OptionList() throws ParseException, ASTException {PairValueList optlist;
        PairValue val;
    val = OptionValue();
optlist = new PairValueList();
                optlist.add(val);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_2;
      }
      jj_consume_token(49);
      val = OptionValue();
optlist.add(val);
    }
{if ("" != null) return optlist;}
    throw new Error("Missing return statement in function");
  }

  final public PairValue OptionValue() throws ParseException, ASTException {Token token;
        AST val;
    token = jj_consume_token(IDENTIFIER);
    jj_consume_token(50);
    val = Expression();
{if ("" != null) return new PairValue(token.image, val);}
    throw new Error("Missing return statement in function");
  }

  final public AST getAST() throws ParseException, ASTException {AST val;
    val = Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEND:{
      jj_consume_token(SEND);
      break;
      }
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return val;}
    throw new Error("Missing return statement in function");
  }

  final public void getASTTest() throws ParseException, ASTException {AST val;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IFELSE:
      case REAL:
      case INTEGER:
      case BOOLEAN:
      case STRING:
      case PLUS:
      case MINUS:
      case NOT:
      case IDENTIFIER:
      case GLOBAL_NTOKEN:
      case NTOKEN:
      case ECOND:
      case OPEN:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_3;
      }
      val = Expression();
System.out.println(val.eval(current));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEND:{
        jj_consume_token(SEND);
        break;
        }
      case NL:{
        jj_consume_token(NL);
        break;
        }
      case 0:{
        jj_consume_token(0);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }

  }

/////
  final public AST Expression() throws ParseException, ASTException {AST val;
    if (jj_2_1(2)) {
      val = AssignExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IFELSE:
      case REAL:
      case INTEGER:
      case BOOLEAN:
      case STRING:
      case PLUS:
      case MINUS:
      case NOT:
      case IDENTIFIER:
      case GLOBAL_NTOKEN:
      case NTOKEN:
      case ECOND:
      case OPEN:{
        val = OrExpression();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return val;}
    throw new Error("Missing return statement in function");
  }

  final public AST AssignExpression() throws ParseException, ASTException {Token token;
        AST val;
    token = jj_consume_token(IDENTIFIER);

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 51:{
      jj_consume_token(51);
      val = Expression();

      break;
      }
    case 50:{
      jj_consume_token(50);
      val = Expression();

      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
current.put(token.image, val);
                {if ("" != null) return val;}
    throw new Error("Missing return statement in function");
  }

  final public AST OrExpression() throws ParseException, ASTException {AST val1;
        AST val2;
    val1 = AndExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      val2 = AndExpression();
val1 = new ASTLogical(val1, val2, "||");
    }
{if ("" != null) return val1;}
    throw new Error("Missing return statement in function");
  }

  final public AST AndExpression() throws ParseException, ASTException {AST val1;
        AST val2;
    val1 = EqExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      val2 = EqExpression();
val1 = new ASTLogical(val1, val2, "&&");
    }
{if ("" != null) return val1;}
    throw new Error("Missing return statement in function");
  }

  final public AST EqExpression() throws ParseException, ASTException {AST val1;
        AST val2;
    val1 = CompareExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NEQ:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        val2 = CompareExpression();
val1 = new ASTComparator(val1, val2, "==");
        break;
        }
      case NEQ:{
        jj_consume_token(NEQ);
        val2 = CompareExpression();
val1 = new ASTComparator(val1, val2, "!=");
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return val1;}
    throw new Error("Missing return statement in function");
  }

  final public AST CompareExpression() throws ParseException, ASTException {AST val1;
        AST val2;
    val1 = TermExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case GTE:
      case LTE:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:{
        jj_consume_token(GT);
        val2 = TermExpression();
val1 = new ASTComparator(val1, val2, ">");
        break;
        }
      case GTE:{
        jj_consume_token(GTE);
        val2 = TermExpression();
val1 = new ASTComparator(val1, val2, ">=");
        break;
        }
      case LT:{
        jj_consume_token(LT);
        val2 = TermExpression();
val1 = new ASTComparator(val1, val2, "<");
        break;
        }
      case LTE:{
        jj_consume_token(LTE);
        val2 = TermExpression();
val1 = new ASTComparator(val1, val2, "<=");
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return val1;}
    throw new Error("Missing return statement in function");
  }

  final public AST TermExpression() throws ParseException, ASTException {AST val1;
        AST val2;
    val1 = MultiplyExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        val2 = MultiplyExpression();
val1 = new ASTArithmetic(val1, val2, "+");
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        val2 = MultiplyExpression();
val1 = new ASTArithmetic(val1, val2, "-");
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return val1;}
    throw new Error("Missing return statement in function");
  }

  final public AST MultiplyExpression() throws ParseException, ASTException {AST val1;
        AST val2;
    val1 = Factor();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:{
        jj_consume_token(MULTIPLY);
        val2 = Factor();
val1 = new ASTArithmetic(val1, val2, "*");
        break;
        }
      case DIVIDE:{
        jj_consume_token(DIVIDE);
        val2 = Factor();
val1 = new ASTArithmetic(val1, val2, "/");
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        val2 = Factor();
val1 = new ASTArithmetic(val1, val2, "%");
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return val1;}
    throw new Error("Missing return statement in function");
  }

  final public AST Factor() throws ParseException, ASTException {AST val1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IFELSE:
    case REAL:
    case INTEGER:
    case BOOLEAN:
    case STRING:
    case IDENTIFIER:
    case GLOBAL_NTOKEN:
    case NTOKEN:
    case ECOND:
    case OPEN:{
      val1 = PrimaryExpression();
{if ("" != null) return val1;}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      val1 = PrimaryExpression();
{if ("" != null) return new ASTUnary(val1, "!");}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      val1 = PrimaryExpression();
{if ("" != null) return val1;}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      val1 = PrimaryExpression();
{if ("" != null) return new ASTUnary(val1, "-");}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AST PrimaryExpression() throws ParseException, ASTException {AST val1, val2, val3;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      token = jj_consume_token(INTEGER);
{if ("" != null) return new ASTValue(Integer.parseInt(token.image));}
      break;
      }
    case REAL:{
      token = jj_consume_token(REAL);
{if ("" != null) return new ASTValue(Double.parseDouble(token.image));}
      break;
      }
    case BOOLEAN:{
      token = jj_consume_token(BOOLEAN);
{if ("" != null) return new ASTValue(Boolean.parseBoolean(token.image));}
      break;
      }
    case STRING:{
      token = jj_consume_token(STRING);
{if ("" != null) return new ASTValue(token.image);}
      break;
      }
    case NTOKEN:{
      jj_consume_token(NTOKEN);
      token = jj_consume_token(IDENTIFIER);
{if ("" != null) return new ASTNumOfToken((Place) current.get(token.image));}
      break;
      }
    case GLOBAL_NTOKEN:{
      jj_consume_token(GLOBAL_NTOKEN);
      token = jj_consume_token(IDENTIFIER);
{if ("" != null) return new ASTNumOfToken((Place) global.get(token.image));}
      break;
      }
    case ECOND:{
      jj_consume_token(ECOND);
      token = jj_consume_token(IDENTIFIER);
{if ("" != null) return new ASTEnableCond((Trans) current.get(token.image));}
      break;
      }
    case IDENTIFIER:{
      token = jj_consume_token(IDENTIFIER);
{if ("" != null) return new ASTVariable(token.image);}
      break;
      }
    case IFELSE:{
      jj_consume_token(IFELSE);
      jj_consume_token(OPEN);
      val1 = Expression();
      jj_consume_token(49);
      val2 = Expression();
      jj_consume_token(49);
      val3 = Expression();
      jj_consume_token(CLOSE);
{if ("" != null) return new ASTTernary(val1, val2, val3, "ite");}
      break;
      }
    case OPEN:{
      jj_consume_token(OPEN);
      val1 = Expression();
      jj_consume_token(CLOSE);
{if ("" != null) return val1;}
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JSPetriNetParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fd5ffc0,0x1f95ffc0,0x400000,0x0,0x1f95ffc0,0x1f95ffc0,0x400000,0x0,0x0,0x4ffc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1f810000,0x1,0x1f810000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x18000000,0xe0000000,0xe0000000,0x1f810000,0x7810000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1be04,0x3e04,0x0,0x18000,0x3e04,0x3e04,0x0,0x18000,0x18000,0x0,0x8000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x20000,0x10000,0x3e04,0x18000,0x3e04,0xc0000,0x1,0x2,0x18,0x18,0x1e0,0x1e0,0x0,0x0,0x0,0x0,0x3e04,0x3e00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JSPetriNetParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JSPetriNetParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSPetriNetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JSPetriNetParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JSPetriNetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JSPetriNetParser(JSPetriNetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JSPetriNetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
